// <auto-generated />
using System;
using Assingment_EFCore.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assingment_EFCore.Infrastructure.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20240512152700_addNewEmployee")]
    partial class addNewEmployee
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assingment_EFCore.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f74eab3-27eb-4c04-b377-ed2e189a618e"),
                            Name = "Software Development"
                        },
                        new
                        {
                            Id = new Guid("d88d1998-c114-4fcb-bc2f-b7542eb8a1be"),
                            Name = "Finance"
                        },
                        new
                        {
                            Id = new Guid("c31519e9-d0ad-4774-8ee6-b3dc0af06c3e"),
                            Name = "Accountant"
                        },
                        new
                        {
                            Id = new Guid("fe0e11e5-5fa9-496b-a09b-b268769244c2"),
                            Name = "HR"
                        },
                        new
                        {
                            Id = new Guid("86f92c7a-eb39-4b1a-8e4c-c0a94dd8f718"),
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = new Guid("bbd48c93-dfdc-4534-ab9b-d6ba336de738"),
                            Name = "Sales"
                        },
                        new
                        {
                            Id = new Guid("44f9fc89-f681-4510-bd67-c73b2aba48f0"),
                            Name = "Customer Service"
                        });
                });

            modelBuilder.Entity("Assingment_EFCore.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ad0dc05-9eb7-42db-a69e-7c4857529d08"),
                            DepartmentId = new Guid("1f74eab3-27eb-4c04-b377-ed2e189a618e"),
                            IsDeleted = false,
                            JoinedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nguyen Van A"
                        },
                        new
                        {
                            Id = new Guid("588d98a1-ce76-4736-acda-1f1110f0082a"),
                            DepartmentId = new Guid("d88d1998-c114-4fcb-bc2f-b7542eb8a1be"),
                            IsDeleted = false,
                            JoinedDate = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nguyen Van B"
                        },
                        new
                        {
                            Id = new Guid("ec9decad-da1d-4000-a6ff-e2dd0d196826"),
                            DepartmentId = new Guid("1f74eab3-27eb-4c04-b377-ed2e189a618e"),
                            IsDeleted = false,
                            JoinedDate = new DateTime(2019, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nguyen Van C"
                        },
                        new
                        {
                            Id = new Guid("d295174c-a047-47c3-9e02-ec18874a4938"),
                            DepartmentId = new Guid("fe0e11e5-5fa9-496b-a09b-b268769244c2"),
                            IsDeleted = false,
                            JoinedDate = new DateTime(2018, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nguyen Van D"
                        },
                        new
                        {
                            Id = new Guid("0298495a-0446-49ce-af03-adc56ded3d53"),
                            DepartmentId = new Guid("86f92c7a-eb39-4b1a-8e4c-c0a94dd8f718"),
                            IsDeleted = false,
                            JoinedDate = new DateTime(2017, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nguyen Van E"
                        },
                        new
                        {
                            Id = new Guid("a7bd8e7c-025d-43ac-ba66-a18dba9052e1"),
                            DepartmentId = new Guid("bbd48c93-dfdc-4534-ab9b-d6ba336de738"),
                            IsDeleted = false,
                            JoinedDate = new DateTime(2016, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nguyen Van F"
                        },
                        new
                        {
                            Id = new Guid("959a1896-4ddf-4f75-9c8f-bd67bf5a720e"),
                            DepartmentId = new Guid("44f9fc89-f681-4510-bd67-c73b2aba48f0"),
                            IsDeleted = false,
                            JoinedDate = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nguyen Van G"
                        },
                        new
                        {
                            Id = new Guid("5f2b0a9e-f5ca-4478-9574-dd279b0a661d"),
                            DepartmentId = new Guid("1f74eab3-27eb-4c04-b377-ed2e189a618e"),
                            IsDeleted = false,
                            JoinedDate = new DateTime(2014, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nguyen Van H"
                        },
                        new
                        {
                            Id = new Guid("e347b583-7829-4cd2-a641-33a37891fb06"),
                            DepartmentId = new Guid("d88d1998-c114-4fcb-bc2f-b7542eb8a1be"),
                            IsDeleted = false,
                            JoinedDate = new DateTime(2013, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nguyen Van I"
                        },
                        new
                        {
                            Id = new Guid("573bd61d-6ec0-40e0-aaee-38f01a3d56c5"),
                            DepartmentId = new Guid("fe0e11e5-5fa9-496b-a09b-b268769244c2"),
                            IsDeleted = false,
                            JoinedDate = new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nguyen Van K"
                        });
                });

            modelBuilder.Entity("Assingment_EFCore.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Assingment_EFCore.Domain.Entities.ProjectEmployee", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ProjectEmployees");
                });

            modelBuilder.Entity("Assingment_EFCore.Domain.Entities.Salary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SalaryAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("Assingment_EFCore.Domain.Entities.Employee", b =>
                {
                    b.HasOne("Assingment_EFCore.Domain.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Assingment_EFCore.Domain.Entities.ProjectEmployee", b =>
                {
                    b.HasOne("Assingment_EFCore.Domain.Entities.Employee", "Employee")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assingment_EFCore.Domain.Entities.Project", "Project")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Assingment_EFCore.Domain.Entities.Salary", b =>
                {
                    b.HasOne("Assingment_EFCore.Domain.Entities.Employee", "Employee")
                        .WithOne("Salary")
                        .HasForeignKey("Assingment_EFCore.Domain.Entities.Salary", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Assingment_EFCore.Domain.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Assingment_EFCore.Domain.Entities.Employee", b =>
                {
                    b.Navigation("ProjectEmployees");

                    b.Navigation("Salary")
                        .IsRequired();
                });

            modelBuilder.Entity("Assingment_EFCore.Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
